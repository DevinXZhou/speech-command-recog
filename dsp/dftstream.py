'''
Created on Aug 24, 2017

@author: original by Doctor Roch
        Modified by Xin Zhou
'''

import numpy as np
import scipy.signal as signal
    
     
class DFTStream:
    '''
    DFTStream - Transform a frame stream to various forms of spectra
    '''


    def __init__(self, frame_stream, specfmt="dB"):
        '''
        DFTStream(frame_stream, specfmt)        
        Create a stream of discrete Fourier transform (DFT) frames using the
        specified sample frame stream. Only bins up to the Nyquist rate are
        returned in the stream Optional arguments:
        
        specfmt - DFT output:  
            "complex" - return complex DFT results
             "dB" [default] - return power spectrum 20log10(magnitude)
             "mag^2" - magnitude squared spectrum
        '''
        
        self.format_types = {"complex" : 0,
                             "mag^2" : 1,
                             "dB" : 2}
        self.framer = frame_stream
        self.frame_len = frame_stream.get_framelen_samples()
        try:
            self.format = self.format_types[specfmt]
        except KeyError:
            raise ValueError("Unknown specfmt {}.  Use one of [{}]".format(
                specfmt, ", ".join(self.format_types.keys())))
             
        self.dft_bins = self.frame_len
        
         
        self.window = signal.get_window("hamming", self.frame_len)
        
        self.bins_Nyquist = np.floor(self.dft_bins/2)
        if self.format == self.format_types["complex"]:
            self.bins_Hz = np.arange(self.dft_bins) / self.framer.get_Fs()
        else:
            # Other types only return to Nyquist
            self.bins_Hz = np.arange(np.floor(self.bins_Nyquist)) / \
                self.bins_Nyquist * frame_stream.get_Nyquist()
        
        self.bins_N = self.bins_Hz.shape[0]
         
    def shape(self):
        "shape() - Return dimensions of tensor yielded by next()"
        return np.asarray([len(self.bins_N), 1])
    
    def size(self):
        "size() - number of elements in tensor generated by iterator"
        return np.asarray(np.product(self.shape()))
    
    def get_Hz(self):
        "get_Hz(Nyquist) - Return frequency bin labels"
        return self.bins_Hz
            
    def __iter__(self):
        "__iter__() Return iterator for stream"
        self.frame_it = iter(self.framer)
        return self
    
    def __next__(self):
        "__next__() Return next DFT frame"
        values = next(self.frame_it)

        # Apply window function to frames & compute DFT for real signals
        windowed = values * self.window
        complexspectrum = np.fft.rfft(windowed, self.dft_bins)
          
        if self.format == 0:
            result = complexspectrum
        elif self.format == 1:
            # magnitude squared
            result = complexspectrum * np.conj(complexspectrum)            
        else:
            # intensity in dB
            val = np.abs(complexspectrum)
            np.place(val,val == 0, 2.2e-22)
            result = 20 * np.log10(val)

        return result[0:self.bins_N]
        
    def __len__(self):
        "len() - Number of tensors in stream"
        return len(self.framer)

        
        
        
    
        